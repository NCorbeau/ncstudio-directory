---
import DirectoryLayout from '../../../layouts/DirectoryLayout.astro';
import ListingCard from '../../../components/core/ListingCard.astro';
import SearchBar from '../../../components/core/SearchBar.astro';
import { generateCategorySchema } from '../../../utils/schema-generator';
import { 
  getAllDirectories, 
  getDirectoryConfig, 
  getCategoryListings 
} from '../../../utils/directory-helpers';

// Generate all dynamic routes
export async function getStaticPaths() {
  const directories = await getAllDirectories();
  const paths = [];
  
  for (const directory of directories) {
    const directoryId = directory.id;
    const directoryData = directory.data;
    
    // Generate a path for each category in this directory
    for (const category of directoryData.categories || []) {
      paths.push({
        params: { 
          directory: directoryId,
          category: category.id
        },
        props: { 
          directoryId,
          categoryId: category.id
        }
      });
    }
  }
  
  return paths;
}

// Get parameters from props
const { directoryId, categoryId } = Astro.props;

// Fetch directory data
const directoryConfig = await getDirectoryConfig(directoryId);

// Handle case where directory config isn't found
if (!directoryConfig) {
  return Astro.redirect('/404');
}

// Get category data from directory config
const categoryData = directoryConfig.data.categories.find(cat => cat.id === categoryId);

// Handle case where category isn't found
if (!categoryData) {
  return Astro.redirect(`/${directoryId}/`);
}

// Fetch listings for this category
const listings = await getCategoryListings(directoryId, categoryId);

// Generate page metadata
const categoryName = categoryData.name;
const categoryDescription = categoryData.description || '';
const title = `${categoryName} | ${directoryConfig.data.name}`;
const description = categoryDescription || `Browse ${categoryName} listings in ${directoryConfig.data.name}`;

// Construct canonical URL
const canonicalUrl = new URL(`/${directoryId}/category/${categoryId}`, Astro.site || 'http://localhost:4321').toString();

// Generate structured data for category page
const structuredData = generateCategorySchema(directoryId, directoryConfig.data, categoryData, canonicalUrl);

// Generate breadcrumbs for this category
const breadcrumbs = [
  {
    name: directoryConfig.data.name,
    url: `/${directoryId}/`
  },
  {
    name: categoryName,
    url: canonicalUrl
  }
];
---

<DirectoryLayout
  title={title}
  description={description}
  directoryData={directoryConfig.data}
  canonicalUrl={canonicalUrl}
  structuredData={structuredData}
  breadcrumbs={breadcrumbs}
>
  <div class="container">
    <header class="category-header">
      <h1>{categoryName}</h1>
      {categoryDescription && <p class="description">{categoryDescription}</p>}
      
      <div class="search-wrapper">
        <SearchBar 
          directoryId={directoryId} 
          placeholder={`Search in ${categoryName}...`}
        />
      </div>
    </header>
    
    <div class="listings-count">
      <p>Showing {listings.length} result{listings.length !== 1 ? 's' : ''}</p>
    </div>
    
    {listings.length > 0 ? (
      <div class="listing-grid">
        {listings.map(listing => (
          <ListingCard 
            listing={listing.data} 
            url={`/${directoryId}/${listing.slug.replace(`${directoryId}/`, '')}`}
            theme={directoryConfig.data.theme}
          />
        ))}
      </div>
    ) : (
      <div class="no-results">
        <p>No listings found in this category.</p>
        <a href={`/${directoryId}/`} class="back-link">Back to all listings</a>
      </div>
    )}
  </div>
</DirectoryLayout>

<style>
  .container {
    max-width: var(--max-width, 1200px);
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  .category-header {
    margin-bottom: 2rem;
    text-align: center;
  }
  
  .category-header h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }
  
  .description {
    font-size: 1.1rem;
    color: #555;
    max-width: 800px;
    margin: 0 auto 2rem;
  }
  
  .search-wrapper {
    max-width: 600px;
    margin: 2rem auto;
  }
  
  .listings-count {
    margin-bottom: 1.5rem;
    font-size: 0.95rem;
    color: #666;
  }
  
  .listing-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
    margin-bottom: 3rem;
  }
  
  .no-results {
    text-align: center;
    padding: 3rem 0;
    background-color: #f9f9f9;
    border-radius: 8px;
  }
  
  .no-results p {
    margin-bottom: 1rem;
    font-size: 1.1rem;
    color: #666;
  }
  
  .back-link {
    display: inline-block;
    padding: 0.5rem 1.5rem;
    background-color: var(--primaryColor);
    color: white;
    text-decoration: none;
    border-radius: 4px;
    font-weight: 500;
  }
  
  .back-link:hover {
    background-color: var(--primaryColor-dark, #2a549f);
  }
  
  @media (max-width: 768px) {
    .category-header h1 {
      font-size: 2rem;
    }
    
    .listing-grid {
      grid-template-columns: 1fr;
    }
  }
</style>