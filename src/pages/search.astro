---
import DirectoryLayout from "../layouts/DirectoryLayout.astro";
import { getDirectoryConfig } from "../utils/directory-helpers";
import { AppProvider } from "../components/solid/providers/AppContext";
import SearchBar from "../components/solid/SearchBar";
import SearchResults from "../components/solid/SearchResults";
import type { Directory } from "../types";

// Get directory ID from environment variable
const directoryId = process.env.CURRENT_DIRECTORY || 'default';

// Fetch directory data
const directoryData = await getDirectoryConfig(directoryId);

// Handle case where directory isn't found
if (!directoryData) {
  return Astro.redirect("/404");
}

// Type cast the directory data
const typedDirectoryData = directoryData as { data: Directory };

// Construct canonical URL (without query parameter for base URL)
const baseUrl = new URL("/search", Astro.site || "http://localhost:4321").toString();
const canonicalUrl = baseUrl;

// Generate breadcrumbs
const breadcrumbs = [
  {
    name: typedDirectoryData.data.name,
    url: "/",
  },
  {
    name: "Search",
    url: baseUrl,
  },
];
---

<DirectoryLayout
  title={`Search | ${typedDirectoryData.data.name}`}
  description={`Search for listings in ${typedDirectoryData.data.name}`}
  directoryData={typedDirectoryData.data}
  canonicalUrl={canonicalUrl}
  breadcrumbs={breadcrumbs}
>
  <AppProvider initialDirectoryId={directoryId} client:load>
    <div class="container">
      <header class="search-header">
        <h1 id="search-title">Search Listings</h1>
        
        <div class="search-wrapper">
          <SearchBar 
            directoryId={directoryId}
            placeholder={`Search ${typedDirectoryData.data.name}...`}
            client:load
          />
        </div>
      </header>
      
      <!-- Search Results Component -->
      <SearchResults
        directoryId={directoryId}
        theme={typedDirectoryData.data.theme}
        client:visible
      />
      
      <!-- Categories Section -->
      <div id="browse-categories" class="browse-categories">
        <h2>Browse by Category</h2>
        <div class="category-grid">
          {typedDirectoryData.data.categories.map(category => (
            <a href={`/category/${category.id}`} class="category-card">
              <h3>{category.name}</h3>
              {category.description && <p>{category.description}</p>}
            </a>
          ))}
        </div>
      </div>
    </div>
  </AppProvider>
</DirectoryLayout>

<style>
  .container {
    max-width: var(--max-width, 1200px);
    margin: 0 auto;
    padding: 0 1rem;
  }
  
  .search-header {
    margin-bottom: 2rem;
    text-align: center;
  }
  
  .search-header h1 {
    font-size: 2.2rem;
    margin-bottom: 2rem;
  }
  
  .search-wrapper {
    max-width: 600px;
    margin: 0 auto 2rem;
  }
  
  .browse-categories {
    margin-top: 3rem;
  }
  
  .browse-categories h2 {
    font-size: 1.8rem;
    text-align: center;
    margin-bottom: 2rem;
  }
  
  .category-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 1.5rem;
  }
  
  .category-card {
    background-color: #f9f9f9;
    border-radius: 8px;
    padding: 1.5rem;
    text-decoration: none;
    color: #333;
    transition: transform 0.2s, box-shadow 0.2s;
    border: 1px solid #eee;
  }
  
  .category-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }
  
  .category-card h3 {
    font-size: 1.3rem;
    margin-bottom: 0.75rem;
    color: var(--primaryColor);
  }
  
  .category-card p {
    font-size: 0.95rem;
    color: #666;
    margin: 0;
  }
</style> 