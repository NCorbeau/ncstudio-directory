---
// src/components/core/LayoutContainer.astro
import CardLayout from '../layouts/CardLayout.astro';
import ListLayout from '../layouts/ListLayout.astro';
import MagazineLayout from '../layouts/MagazineLayout.astro';
import MapLayout from '../layouts/MapLayout.astro';
import TableLayout from '../layouts/TableLayout.astro';
import LayoutSwitcher from './LayoutSwitcher.astro';

const { 
  listings, 
  directory, 
  currentLayout,
  categories = [],
  searchParams = '',
  directoryId
} = Astro.props;

// Get available layouts from directory config
const availableLayouts = directory.availableLayouts || ['Card'];
const defaultLayout = directory.defaultLayout || 'Card';

// Check if there's a layout in the URL that should override the default
let layoutToUse = defaultLayout;
let urlSearchParams;

try {
  // Parse the search params to check for layout param
  urlSearchParams = new URLSearchParams(searchParams);
  const urlLayout = urlSearchParams.get('layout');
  
  // Only use the URL layout if it's valid
  if (urlLayout && availableLayouts.includes(urlLayout)) {
    layoutToUse = urlLayout;
  }
} catch (e) {
  console.error('Error parsing search params:', e);
}

// Override with currentLayout prop if it's valid (highest priority)
if (currentLayout && availableLayouts.includes(currentLayout)) {
  layoutToUse = currentLayout;
}
---

<div class="layout-container">
  {availableLayouts.length > 1 && (
    <LayoutSwitcher 
      availableLayouts={availableLayouts}
      currentLayout={layoutToUse}
      directoryId={directoryId}
      searchParams={searchParams}
    />
  )}
  
  <div id="layout-content" class="layout-content" data-layout={layoutToUse}>
    {layoutToUse === 'Card' && (
      <CardLayout 
        listings={listings} 
        directory={directory}
        categories={categories}
      />
    )}
    
    {layoutToUse === 'List' && (
      <ListLayout
        listings={listings}
        directory={directory}
        categories={categories}
        directoryId={directoryId}
      />
    )}
    
    {layoutToUse === 'Magazine' && (
      <MagazineLayout
        listings={listings}
        directory={directory}
        categories={categories}
        directoryId={directoryId}
      />
    )}
    
    {layoutToUse === 'Map' && (
      <MapLayout
        listings={listings}
        directory={directory}
        categories={categories}
      />
    )}
    
    {layoutToUse === 'Table' && (
      <TableLayout
        listings={listings}
        directory={directory}
        categories={categories}
      />
    )}
  </div>
</div>

<script>
  // Store the current layout to avoid unnecessary reloads
  let currentUrlLayout = new URLSearchParams(window.location.search).get('layout');
  
  // Listen for layout change events from LayoutSwitcher
  document.addEventListener('layoutchange', (e) => {
    const newLayout = e.detail.layout;
    
    // Only update if the layout is actually changing from what's in the URL
    if (newLayout && newLayout !== currentUrlLayout) {
      // Update the URL with the new layout
      const url = new URL(window.location.href);
      url.searchParams.set('layout', newLayout);
      
      // Navigate to the new URL (which will cause a reload)
      window.location.href = url.toString();
    }
  });
</script>

<style>
  .layout-container {
    margin-bottom: 2rem;
  }
  
  .layout-content {
    min-height: 400px; /* Ensure consistent height when switching layouts */
  }
</style>