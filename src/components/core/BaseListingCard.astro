---
import { normalizeListing, getThumbnailImage, formatLocation, getGoogleMapsUrl } from "@/utils/listing-helpers";
import { getThemeConfig } from "@/config/themes";
import EnhancedRating from "@/components/core/EnhancedRating.astro";
import CardAddress from "@/components/core/CardAddress.astro";
import CardTags from "@/components/core/CardTags.astro";
import FeaturedBadge from "@/components/core/FeaturedBadge.astro";
import BusinessStatus from "@/components/core/BusinessStatus.astro";
import ContactInfo from "@/components/core/ContactInfo.astro";
import type { ListingData } from "@/types";

export interface Props {
  listing: ListingData;
  url: string;
  theme?: string;
}

const { listing, url, theme = 'default' } = Astro.props;

// Normalize the listing data
const normalizedListing = normalizeListing(listing);

// Get theme configuration
const config = getThemeConfig(theme);

// Prepare data
const thumbnail = getThumbnailImage(normalizedListing.images);
const location = formatLocation(normalizedListing);
const mapsUrl = getGoogleMapsUrl(normalizedListing.coordinates, normalizedListing.address);

// Determine layout classes
const layoutClass = `layout-${config.layout}`;
const shadowClass = `shadow-${config.styling.shadowIntensity}`;
---

<div 
  class={`listing-card ${theme} ${layoutClass} ${shadowClass}`}
  style={`
    --card-border-radius: ${config.styling.borderRadius};
    --card-padding: ${config.styling.cardPadding};
    --image-height: ${config.styling.imageHeight};
    --hover-transform: ${config.styling.hoverTransform};
  `}
>
  <a href={url} class="card-link">
    <!-- Image Section -->
    <div class="card-image">
      <img src={thumbnail} alt={normalizedListing.title} loading="lazy" />
      
      {normalizedListing.featured && config.elements.showFeaturedBadge && (
        <FeaturedBadge theme={theme} position="top-right" />
      )}
      
      {normalizedListing.category && config.elements.categoryPosition === 'overlay' && (
        <div class="card-category overlay">{normalizedListing.category}</div>
      )}
    </div>
    
    <!-- Content Section -->
    <div class="card-content">
      <!-- Top Meta (category + rating when positioned at top) -->
      {(normalizedListing.category && config.elements.categoryPosition === 'top') || 
       (normalizedListing.rating && config.elements.ratingPosition === 'top') ? (
        <div class="card-meta-top">
          {normalizedListing.category && config.elements.categoryPosition === 'top' && (
            <div class="card-category top">{normalizedListing.category}</div>
          )}
          
          {normalizedListing.rating && config.elements.showRating && config.elements.ratingPosition === 'top' && (
            <EnhancedRating 
              rating={normalizedListing.rating} 
              reviewCount={normalizedListing.reviewCount}
              theme={theme} 
              size="small"
            />
          )}
        </div>
      ) : null}
      
      <!-- Title -->
      <h3 class="card-title">{normalizedListing.title}</h3>
      
      <!-- Business Status (for business listings) -->
      {(normalizedListing.isOpen !== undefined || normalizedListing.openingHours) && (
        <BusinessStatus 
          isOpen={normalizedListing.isOpen}
          openingHours={normalizedListing.openingHours}
          theme={theme}
        />
      )}
      
      <!-- Inline Rating (for elegant theme) -->
      {normalizedListing.rating && config.elements.showRating && config.elements.ratingPosition === 'inline' && (
        <EnhancedRating 
          rating={normalizedListing.rating} 
          reviewCount={normalizedListing.reviewCount}
          theme={theme} 
          size="medium"
        />
      )}
      
      <!-- Description -->
      {normalizedListing.description && (
        <p class="card-description">{normalizedListing.description}</p>
      )}
      
      <!-- Location (simplified address) -->
      {location && (
        <div class="card-location">
          <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
            <circle cx="12" cy="10" r="3"></circle>
          </svg>
          {mapsUrl ? (
            <a href={mapsUrl} target="_blank" rel="noopener noreferrer" class="location-link">
              {location}
            </a>
          ) : (
            <span>{location}</span>
          )}
        </div>
      )}
      
      <!-- Bottom Meta -->
      <div class="card-meta-bottom">
        {normalizedListing.category && config.elements.categoryPosition === 'bottom' && (
          <div class="card-category bottom">{normalizedListing.category}</div>
        )}
        
        {normalizedListing.rating && config.elements.showRating && config.elements.ratingPosition === 'bottom' && (
          <EnhancedRating 
            rating={normalizedListing.rating} 
            reviewCount={normalizedListing.reviewCount}
            theme={theme} 
            size="medium"
          />
        )}
        
        {config.elements.showAddress && normalizedListing.address && (
          <CardAddress address={normalizedListing.address} theme={theme} />
        )}
        
        {(normalizedListing.phone || normalizedListing.website) && (
          <ContactInfo 
            phone={normalizedListing.phone}
            website={normalizedListing.website}
            theme={theme}
            layout="horizontal"
          />
        )}
        
        {config.elements.showTags && normalizedListing.tags && normalizedListing.tags.length > 0 && (
          <CardTags 
            tags={normalizedListing.tags} 
            maxTags={config.elements.maxTags} 
            theme={theme} 
            showMore={true} 
          />
        )}
      </div>
    </div>
  </a>
</div>

<style>
  .listing-card {
    border-radius: var(--card-border-radius);
    overflow: hidden;
    background-color: white;
    transition: transform 0.3s, box-shadow 0.3s;
    height: 100%;
    position: relative;
  }
  
  .listing-card:hover {
    transform: var(--hover-transform);
  }
  
  /* Shadow intensities */
  .shadow-light {
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    border: 1px solid rgba(0, 0, 0, 0.08);
  }
  
  .shadow-light:hover {
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
  }
  
  .shadow-medium {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
  }
  
  .shadow-medium:hover {
    box-shadow: 0 12px 20px rgba(0, 0, 0, 0.15);
  }
  
  .shadow-heavy {
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
  }
  
  .shadow-heavy:hover {
    box-shadow: 0 16px 40px rgba(0, 0, 0, 0.2);
  }
  
  /* Layout variations */
  .layout-standard .card-link {
    display: flex;
    flex-direction: column;
    color: inherit;
    text-decoration: none;
    height: 100%;
  }
  
  .layout-horizontal .card-link {
    display: grid;
    grid-template-columns: 3fr 2fr;
    gap: 0;
    color: inherit;
    text-decoration: none;
    height: 100%;
  }
  
  .layout-feature-rich .card-link {
    display: flex;
    flex-direction: column;
    color: inherit;
    text-decoration: none;
    height: 100%;
  }
  
  /* Image styling */
  .card-image {
    height: var(--image-height);
    position: relative;
    overflow: hidden;
  }
  
  .layout-horizontal .card-image {
    height: 100%;
  }
  
  .card-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s;
  }
  
  .listing-card:hover .card-image img {
    transform: scale(1.05);
  }
  
  /* Content styling */
  .card-content {
    padding: var(--card-padding);
    display: flex;
    flex-direction: column;
    flex-grow: 1;
    gap: 0.75rem;
  }
  
  .card-meta-top {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .card-meta-bottom {
    margin-top: auto;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }
  
  .card-title {
    font-size: 1.25rem;
    margin: 0;
    font-weight: 600;
    color: var(--text-color, #333);
    line-height: 1.3;
  }
  
  .card-description {
    font-size: 0.9rem;
    color: var(--text-color-light, #666);
    margin: 0;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    line-height: 1.4;
  }
  
  .card-location {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    font-size: 0.85rem;
    color: var(--text-color-light, #666);
  }
  
  .card-location svg {
    flex-shrink: 0;
    color: var(--primary-color, #666);
  }
  
  .location-link {
    color: inherit;
    text-decoration: none;
    transition: color 0.2s;
  }
  
  .location-link:hover {
    color: var(--primary-color, #3366cc);
    text-decoration: underline;
  }
  
  /* Category styling */
  .card-category {
    font-size: 0.85rem;
    font-weight: 600;
  }
  
  .card-category.top,
  .card-category.bottom {
    background-color: var(--category-bg, rgba(51, 102, 204, 0.1));
    color: var(--category-color, #3366cc);
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    width: fit-content;
  }
  
  .card-category.overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(to top, rgba(0,0,0,0.7), rgba(0,0,0,0));
    color: white;
    padding: 1.5rem 1rem 0.75rem;
    z-index: 1;
  }
  
  /* Theme-specific styles */
  .nature {
    --category-bg: rgba(var(--primaryColor-rgb, 75, 127, 82), 0.1);
    --category-color: var(--primaryColor, #4b7f52);
    --text-color: var(--textColor, #2d3c2e);
    --text-color-light: var(--textColorLight, #5a6b5b);
    --primary-color: var(--primaryColor, #4b7f52);
  }
  
  .nature::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 5px;
    height: 100%;
    background-color: var(--primaryColor, #4b7f52);
    opacity: 0.7;
    transition: width 0.3s;
    z-index: 1;
  }
  
  .nature:hover::before {
    width: 8px;
  }
  
  .modern {
    --category-bg: rgba(var(--primaryColor-rgb, 0, 112, 243), 0.1);
    --category-color: var(--primaryColor, #0070f3);
    --text-color: #111111;
    --text-color-light: #666;
    --primary-color: var(--primaryColor, #0070f3);
  }
  
  .elegant {
    --category-bg: transparent;
    --category-color: var(--textColorLight, #7f8c8d);
    --text-color: var(--textColor, #2c3e50);
    --text-color-light: var(--textColorLight, #7f8c8d);
    --primary-color: var(--primaryColor, #9c7c38);
  }
  
  .elegant .card-title {
    font-family: Georgia, serif;
    color: var(--primaryColor, #9c7c38);
    line-height: 1.3;
  }
  
  .elegant .card-category.top {
    background: none;
    padding: 0;
    font-style: italic;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .layout-horizontal .card-link {
      grid-template-columns: 1fr;
    }
    
    .layout-horizontal .card-image {
      height: 180px;
      order: -1;
    }
    
    .card-image {
      height: 180px;
    }
    
    .card-content {
      gap: 0.5rem;
    }
    
    .card-description {
      -webkit-line-clamp: 2;
    }
  }
</style> 