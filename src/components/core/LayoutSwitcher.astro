---
// src/components/core/LayoutSwitcher.astro
const { availableLayouts, currentLayout, directoryId, searchParams = '' } = Astro.props;

// Map layout IDs to readable names and icons
const layoutInfo = {
  Map: { name: "Map View", icon: "map" },
  Card: { name: "Card View", icon: "grid" },
  Table: { name: "Table View", icon: "list-table" },
  Magazine: { name: "Magazine", icon: "layout" },
  List: { name: "List View", icon: "list" }
};

// Build the base URL for switching layouts
const baseUrl = `/${directoryId}`;
const queryParams = new URLSearchParams(searchParams);
---

<div class="layout-switcher">
  <span class="layout-label">View:</span>
  
  <div class="layout-options">
    {availableLayouts.map(layout => {
      // Clone the queryParams and set the layout
      const layoutParams = new URLSearchParams(queryParams);
      layoutParams.set('layout', layout);
      
      // Build the URL for this layout
      const layoutUrl = `${baseUrl}?${layoutParams.toString()}`;
      
      return (
        <a 
          href={layoutUrl} 
          class={`layout-option ${currentLayout === layout ? 'active' : ''}`}
          title={layoutInfo[layout]?.name || layout}
          aria-label={`Switch to ${layoutInfo[layout]?.name || layout}`}
          data-layout={layout}
        >
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18" height="18" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            {layout === 'Map' && (
              <path d="M1 6v16l7-4 8 4 7-4V2l-7 4-8-4-7 4zm7-4v16m8-12v16" />
            )}
            {layout === 'Card' && (
              <path d="M10 3H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zm10 0h-6a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4a1 1 0 0 0-1-1zM10 13H4a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1zm10 0h-6a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1z" />
            )}
            {layout === 'Table' && (
              <path d="M3 3h18v18H3zm0 9h18M9 3v18" />
            )}
            {layout === 'Magazine' && (
              <path d="M4 3h16a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1zm1 8h14M9 21V11" />
            )}
            {layout === 'List' && (
              <path d="M8 6h13M8 12h13M8 18h13M3 6h.01M3 12h.01M3 18h.01" />
            )}
          </svg>
          <span class="layout-name">{layoutInfo[layout]?.name || layout}</span>
        </a>
      );
    })}
  </div>
</div>

<script>
  // Client-side layout switching
  document.addEventListener('DOMContentLoaded', () => {
    const layoutOptions = document.querySelectorAll('.layout-option');
    
    // Handle clicks on layout options
    layoutOptions.forEach(option => {
      option.addEventListener('click', (e) => {
        // If this is a client-side navigation, prevent default and handle it ourselves
        if (window.history && window.history.pushState) {
          e.preventDefault();
          
          // Get the layout from the data attribute
          const layout = option.dataset.layout;
          
          // Update URL without page reload
          const url = new URL(option.href);
          window.history.pushState({}, '', url);
          
          // Update active class
          layoutOptions.forEach(opt => opt.classList.remove('active'));
          option.classList.add('active');
          
          // Trigger a custom event that the layout container can listen for
          const event = new CustomEvent('layoutchange', { 
            detail: { layout } 
          });
          document.dispatchEvent(event);
        }
      });
    });
    
    // Check URL params on page load
    const urlParams = new URLSearchParams(window.location.search);
    const layoutParam = urlParams.get('layout');
    
    if (layoutParam) {
      // Find the matching layout option
      const matchingOption = document.querySelector(`.layout-option[data-layout="${layoutParam}"]`);
      if (matchingOption) {
        // Update active class
        layoutOptions.forEach(opt => opt.classList.remove('active'));
        matchingOption.classList.add('active');
        
        // Trigger layout change event
        const event = new CustomEvent('layoutchange', { 
          detail: { layout: layoutParam } 
        });
        document.dispatchEvent(event);
      }
    }
  });
</script>

<style>
  .layout-switcher {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
    background-color: #f5f5f5;
    padding: 0.5rem 1rem;
    border-radius: 8px;
  }
  
  .layout-label {
    font-weight: 500;
    color: #666;
    font-size: 0.9rem;
  }
  
  .layout-options {
    display: flex;
    gap: 0.5rem;
  }
  
  .layout-option {
    display: flex;
    align-items: center;
    gap: 0.4rem;
    padding: 0.4rem 0.75rem;
    border-radius: 4px;
    color: #555;
    text-decoration: none;
    transition: all 0.2s;
  }
  
  .layout-option:hover {
    background-color: #e5e5e5;
  }
  
  .layout-option.active {
    background-color: var(--primaryColor, #4b7f52);
    color: white;
  }
  
  .layout-name {
    font-size: 0.9rem;
  }
  
  @media (max-width: 640px) {
    .layout-name {
      display: none;
    }
    
    .layout-option {
      padding: 0.5rem;
    }
  }
</style>