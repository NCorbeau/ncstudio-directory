---
// src/components/layouts/MapLayout.astro
import ListingCard from '../core/ListingCard.astro';

const { listings, directory, categories = [] } = Astro.props;
---

<div class="map-layout">
  <div class="sidebar">
    <div class="listing-list">
      {listings.map(listing => (
        <div class="listing-item" data-id={listing.slug}>
          <h3>{listing.data.title}</h3>
          <p>{listing.data.description.substring(0, 100)}...</p>
          
          {listing.data.address && (
            <div class="listing-address">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                <circle cx="12" cy="10" r="3"></circle>
              </svg>
              <span>{listing.data.address}</span>
            </div>
          )}
        </div>
      ))}
    </div>
  </div>
  
  <div class="map-container">
    <div id="map"></div>
  </div>
</div>

<script>
  // Only execute this code when the Map layout is active
  document.addEventListener('DOMContentLoaded', () => {
    // Check if we're using the map layout
    const mapContainer = document.querySelector('.map-layout');
    if (!mapContainer) return;
    
    // Initialize the map (using Leaflet or Google Maps)
    // This is a simplified example using Leaflet
    const initMap = async () => {
      // Load Leaflet CSS and JS dynamically
      await loadLeaflet();
      
      // Initialize map
      const map = L.map('map').setView([52.2297, 21.0122], 12); // Warsaw coordinates
      
      // Add tile layer
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);
      
      // Add markers for each listing with address
      const listingItems = document.querySelectorAll('.listing-item');
      
      listingItems.forEach(item => {
        const addressEl = item.querySelector('.listing-address span');
        if (!addressEl) return;
        
        const address = addressEl.textContent;
        // In a real implementation, you would geocode the address or use coordinates from your data
        // For this example, we'll use random coordinates around Warsaw
        const lat = 52.2297 + (Math.random() - 0.5) * 0.1;
        const lng = 21.0122 + (Math.random() - 0.5) * 0.1;
        
        // Create marker
        const marker = L.marker([lat, lng]).addTo(map);
        
        // Create popup with listing info
        const title = item.querySelector('h3').textContent;
        marker.bindPopup(`<strong>${title}</strong><br>${address}`);
        
        // Connect marker to listing item
        item.addEventListener('mouseenter', () => {
          marker.openPopup();
        });
        
        marker.on('click', () => {
          // Highlight the corresponding listing in the sidebar
          listingItems.forEach(i => i.classList.remove('active'));
          item.classList.add('active');
          item.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        });
      });
    };
    
    // Helper function to load Leaflet
    const loadLeaflet = async () => {
      // Load CSS
      if (!document.querySelector('link[href*="leaflet.css"]')) {
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.css';
        document.head.appendChild(link);
      }
      
      // Load JS
      if (!window.L) {
        return new Promise((resolve) => {
          const script = document.createElement('script');
          script.src = 'https://unpkg.com/leaflet@1.7.1/dist/leaflet.js';
          script.onload = resolve;
          document.head.appendChild(script);
        });
      }
    };
    
    // Initialize the map
    initMap();
  });
</script>

<style>
  .map-layout {
    display: grid;
    grid-template-columns: 300px 1fr;
    gap: 1rem;
    height: 600px;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }
  
  .sidebar {
    background-color: #f5f5f5;
    overflow-y: auto;
  }
  
  .listing-list {
    display: flex;
    flex-direction: column;
  }
  
  .listing-item {
    padding: 1rem;
    border-bottom: 1px solid #e0e0e0;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .listing-item:hover, 
  .listing-item.active {
    background-color: rgba(var(--primaryColor-rgb, 75, 127, 82), 0.1);
  }
  
  .listing-item h3 {
    font-size: 1rem;
    margin-bottom: 0.5rem;
  }
  
  .listing-item p {
    font-size: 0.85rem;
    color: #666;
    margin-bottom: 0.5rem;
  }
  
  .listing-address {
    display: flex;
    align-items: center;
    gap: 0.3rem;
    font-size: 0.8rem;
    color: #777;
  }
  
  .map-container {
    position: relative;
  }
  
  #map {
    width: 100%;
    height: 100%;
  }
  
  @media (max-width: 768px) {
    .map-layout {
      grid-template-columns: 1fr;
      grid-template-rows: 200px 1fr;
    }
  }
</style>