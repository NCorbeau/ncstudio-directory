---
// src/components/layouts/ListLayout.astro
// Sidebar listing with main content area

const { listings, directory, categories = [], directoryId } = Astro.props;
const theme = directory.theme || 'default';

// Function to truncate text
function truncateText(text, maxLength = 100) {
  if (!text || text.length <= maxLength) return text;
  return text.substring(0, maxLength) + '...';
}

// Default to the first listing as active if available
const defaultActiveListing = listings.length > 0 ? listings[0] : null;
---

<div class="list-layout">
  <div class="sidebar">
    <div class="filters">
      <select id="category-filter" class="category-select">
        <option value="">All Categories</option>
        {categories.map(category => (
          <option value={category.id}>{category.name}</option>
        ))}
      </select>
      
      <div class="search-box">
        <input type="text" id="listing-search" placeholder="Filter listings...">
      </div>
    </div>
    
    <div class="listing-list">
      {listings.map((listing, index) => {
        // Get category name
        const category = categories.find(c => c.id === listing.data.category);
        const categoryName = category ? category.name : listing.data.category;
        
        return (
          <div class={`listing-item ${index === 0 ? 'active' : ''}`} 
               data-id={listing.slug.replace(`${directoryId}/`, '')}
               data-category={listing.data.category}
               data-title={listing.data.title}>
            <div class="listing-header">
              <h3>{listing.data.title}</h3>
              {listing.data.featured && <span class="featured-badge">Featured</span>}
            </div>
            <div class="listing-meta">
              {categoryName && <span class="category-tag">{categoryName}</span>}
              {listing.data.rating && 
                <span class="rating">
                  <span class="stars" style={`--rating: ${listing.data.rating}`}></span>
                  <span class="rating-value">{listing.data.rating}</span>
                </span>
              }
            </div>
            <p class="listing-excerpt">{truncateText(listing.data.description, 80)}</p>
          </div>
        );
      })}
    </div>
  </div>
  
  <div class="main-content" id="listing-content">
    <!-- Initial content will be loaded by JavaScript -->
    {defaultActiveListing && (
      <div class="listing-detail" id="initial-content">
        <div class="detail-header">
          <h2>{defaultActiveListing.data.title}</h2>
          
          <a href={`/${directoryId}/${defaultActiveListing.slug.replace(`${directoryId}/`, '')}`} 
             class="view-full-button">
            View Full Details
          </a>
        </div>
        
        {defaultActiveListing.data.images && defaultActiveListing.data.images.length > 0 && (
          <div class="detail-image">
            <img src={defaultActiveListing.data.images[0]} alt={defaultActiveListing.data.title} />
          </div>
        )}
        
        <div class="detail-info">
          <div class="detail-meta">
            {defaultActiveListing.data.address && (
              <div class="meta-item">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                  <circle cx="12" cy="10" r="3"></circle>
                </svg>
                <span>{defaultActiveListing.data.address}</span>
              </div>
            )}
            
            {defaultActiveListing.data.website && (
              <div class="meta-item">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="12" cy="12" r="10"></circle>
                  <line x1="2" y1="12" x2="22" y2="12"></line>
                  <path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path>
                </svg>
                <a href={defaultActiveListing.data.website} target="_blank" rel="noopener noreferrer">
                  Visit Website
                </a>
              </div>
            )}
            
            {defaultActiveListing.data.phone && (
              <div class="meta-item">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                </svg>
                <a href={`tel:${defaultActiveListing.data.phone}`}>{defaultActiveListing.data.phone}</a>
              </div>
            )}
          </div>
          
          <div class="detail-description">
            <p>{defaultActiveListing.data.description}</p>
          </div>
          
          {defaultActiveListing.data.tags && defaultActiveListing.data.tags.length > 0 && (
            <div class="detail-tags">
              {defaultActiveListing.data.tags.map(tag => (
                <span class="tag">{tag}</span>
              ))}
            </div>
          )}
        </div>
      </div>
    )}
  </div>
</div>

<script define:vars={{ listings, directoryId }}>
  document.addEventListener('DOMContentLoaded', () => {
    const listLayout = document.querySelector('.list-layout');
    if (!listLayout) return;
    
    const listingItems = document.querySelectorAll('.listing-item');
    const contentContainer = document.getElementById('listing-content');
    const categoryFilter = document.getElementById('category-filter');
    const searchInput = document.getElementById('listing-search');
    
    // Function to filter listings
    const filterListings = () => {
      const searchTerm = searchInput.value.toLowerCase();
      const categoryValue = categoryFilter.value;
      
      listingItems.forEach(item => {
        const title = item.dataset.title.toLowerCase();
        const category = item.dataset.category;
        
        const matchesSearch = title.includes(searchTerm);
        const matchesCategory = !categoryValue || category === categoryValue;
        
        item.style.display = matchesSearch && matchesCategory ? '' : 'none';
      });
      
      // If active item is now hidden, select first visible item
      const activeItem = document.querySelector('.listing-item.active');
      if (activeItem && activeItem.style.display === 'none') {
        const firstVisible = document.querySelector('.listing-item[style=""]');
        if (firstVisible) {
          selectListingItem(firstVisible);
        }
      }
    };
    
    // Function to load listing content
    const loadListingContent = (listingId) => {
      // Find the listing data
      const listingData = listings.find(listing => 
        listing.slug.replace(`${directoryId}/`, '') === listingId
      );
      
      if (!listingData) return;
      
      // Format images
      const imageHtml = listingData.data.images && listingData.data.images.length > 0 
        ? `<div class="detail-image">
            <img src="${listingData.data.images[0]}" alt="${listingData.data.title}" />
          </div>`
        : '';
      
      // Format tags
      let tagsHtml = '';
      if (listingData.data.tags && listingData.data.tags.length > 0) {
        tagsHtml = `
          <div class="detail-tags">
            ${listingData.data.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
          </div>
        `;
      }
      
      // Build meta items
      const metaItems = [];
      
      if (listingData.data.address) {
        metaItems.push(`
          <div class="meta-item">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
              <circle cx="12" cy="10" r="3"></circle>
            </svg>
            <span>${listingData.data.address}</span>
          </div>
        `);
      }
      
      if (listingData.data.website) {
        metaItems.push(`
          <div class="meta-item">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="10"></circle>
              <line x1="2" y1="12" x2="22" y2="12"></line>
              <path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path>
            </svg>
            <a href="${listingData.data.website}" target="_blank" rel="noopener noreferrer">
              Visit Website
            </a>
          </div>
        `);
      }
      
      if (listingData.data.phone) {
        metaItems.push(`
          <div class="meta-item">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
            </svg>
            <a href="tel:${listingData.data.phone}">${listingData.data.phone}</a>
          </div>
        `);
      }
      
      // Build the HTML
      const html = `
        <div class="listing-detail">
          <div class="detail-header">
            <h2>${listingData.data.title}</h2>
            
            <a href="/${directoryId}/${listingData.slug.replace(`${directoryId}/`, '')}" 
               class="view-full-button">
              View Full Details
            </a>
          </div>
          
          ${imageHtml}
          
          <div class="detail-info">
            <div class="detail-meta">
              ${metaItems.join('')}
            </div>
            
            <div class="detail-description">
              <p>${listingData.data.description}</p>
            </div>
            
            ${tagsHtml}
          </div>
        </div>
      `;
      
      // Update the content
      contentContainer.innerHTML = html;
    };
    
    // Function to select a listing item
    const selectListingItem = (item) => {
      // Remove active class from all items
      listingItems.forEach(i => i.classList.remove('active'));
      
      // Add active class to selected item
      item.classList.add('active');
      
      // Load the listing content
      const listingId = item.dataset.id;
      loadListingContent(listingId);
      
      // On mobile, scroll back to the top after changing content
      if (window.innerWidth < 768) {
        contentContainer.scrollIntoView({ behavior: 'smooth' });
      }
    };
    
    // Add click event listeners to listing items
    listingItems.forEach(item => {
      item.addEventListener('click', () => {
        selectListingItem(item);
      });
    });
    
    // Add event listeners for filters
    if (categoryFilter) {
      categoryFilter.addEventListener('change', filterListings);
    }
    
    if (searchInput) {
      searchInput.addEventListener('input', filterListings);
    }
  });
</script>

<style>
  .list-layout {
    display: grid;
    grid-template-columns: 300px 1fr;
    gap: 2rem;
    min-height: 600px;
  }
  
  .sidebar {
    display: flex;
    flex-direction: column;
    border-right: 1px solid #eee;
  }
  
  .filters {
    padding: 1rem;
    border-bottom: 1px solid #eee;
    background-color: #f9f9f9;
  }
  
  .category-select {
    width: 100%;
    padding: 0.5rem;
    border-radius: 4px;
    border: 1px solid #ddd;
    margin-bottom: 0.75rem;
  }
  
  .search-box input {
    width: 100%;
    padding: 0.5rem;
    border-radius: 4px;
    border: 1px solid #ddd;
  }
  
  .listing-list {
    flex-grow: 1;
    overflow-y: auto;
    max-height: 600px;
  }
  
  .listing-item {
    padding: 1rem;
    border-bottom: 1px solid #eee;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .listing-item:hover {
    background-color: #f5f5f5;
  }
  
  .listing-item.active {
    background-color: rgba(var(--primaryColor-rgb, 51, 102, 204), 0.1);
    border-left: 3px solid var(--primaryColor, #3366cc);
  }
  
  .listing-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 0.5rem;
  }
  
  .listing-header h3 {
    font-size: 1rem;
    margin: 0;
    font-weight: 600;
  }
  
  .featured-badge {
    font-size: 0.7rem;
    background-color: var(--secondaryColor, #ff9900);
    color: white;
    padding: 0.1rem 0.4rem;
    border-radius: 3px;
    white-space: nowrap;
  }
  
  .listing-meta {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.5rem;
    font-size: 0.8rem;
  }
  
  .category-tag {
    color: var(--primaryColor, #3366cc);
  }
  
  .stars {
    position: relative;
    display: inline-block;
    font-size: 0.8rem;
    width: 5em;
  }
  
  .stars::before {
    content: "★★★★★";
    color: #ddd;
  }
  
  .stars::after {
    content: "★★★★★";
    color: #ffc107;
    position: absolute;
    top: 0;
    left: 0;
    width: calc(var(--rating) / 5 * 100%);
    overflow: hidden;
  }
  
  .rating-value {
    font-size: 0.8rem;
    margin-left: 0.25rem;
  }
  
  .listing-excerpt {
    font-size: 0.9rem;
    color: #666;
    margin: 0;
    white-space: normal;
    overflow: hidden;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }
  
  /* Main content styles */
  .main-content {
    padding: 1rem;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
  }
  
  .detail-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #eee;
  }
  
  .detail-header h2 {
    font-size: 1.8rem;
    margin: 0;
    color: var(--primaryColor, #3366cc);
  }
  
  .view-full-button {
    display: inline-block;
    background-color: var(--primaryColor, #3366cc);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    text-decoration: none;
    font-size: 0.9rem;
    transition: background-color 0.2s;
  }
  
  .view-full-button:hover {
    background-color: var(--primaryColor-dark, #2a549f);
  }
  
  .detail-image {
    width: 100%;
    height: 300px;
    border-radius: 8px;
    overflow: hidden;
    margin-bottom: 1.5rem;
  }
  
  .detail-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .detail-meta {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
  }
  
  .meta-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.95rem;
  }
  
  .meta-item svg {
    color: var(--primaryColor, #3366cc);
    flex-shrink: 0;
  }
  
  .meta-item a {
    color: var(--primaryColor, #3366cc);
    text-decoration: none;
  }
  
  .meta-item a:hover {
    text-decoration: underline;
  }
  
  .detail-description {
    margin-bottom: 1.5rem;
    line-height: 1.6;
  }
  
  .detail-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 1rem;
  }
  
  .tag {
    display: inline-block;
    background-color: #f0f0f0;
    padding: 0.3rem 0.7rem;
    border-radius: 4px;
    font-size: 0.8rem;
    color: #666;
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .list-layout {
      grid-template-columns: 1fr;
      grid-template-rows: auto 1fr;
    }
    
    .sidebar {
      border-right: none;
      border-bottom: 1px solid #eee;
    }
    
    .listing-list {
      max-height: 300px;
    }
  }
</style>