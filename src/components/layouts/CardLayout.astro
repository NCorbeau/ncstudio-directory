---
import ListingCard from '../core/ListingCard.astro';

const { listings, directory, categories = [] } = Astro.props;
const theme = directory.theme || 'default';
---

<div class="card-layout">
  <div class="filters-bar">
    <div class="filter-section">
      <label for="category-filter">Category</label>
      <select id="category-filter" class="filter-select">
        <option value="">All Categories</option>
        {categories.map(category => (
          <option value={category.id}>{category.name}</option>
        ))}
      </select>
    </div>
    
    <div class="filter-section">
      <label for="sort-filter">Sort By</label>
      <select id="sort-filter" class="filter-select">
        <option value="featured">Featured</option>
        <option value="name">Name A-Z</option>
        <option value="rating">Highest Rated</option>
        <option value="newest">Newest</option>
      </select>
    </div>
  </div>
  
  <div class="listing-grid">
    {listings.map(listing => (
      <ListingCard 
        listing={listing.data} 
        url={`/${directory.id}/${listing.slug.replace(`${directory.id}/`, '')}`}
        theme={theme}
      />
    ))}
  </div>
</div>

<script>
  // Filter and sort functionality
  document.addEventListener('DOMContentLoaded', () => {
    const cardLayout = document.querySelector('.card-layout');
    if (!cardLayout) return;
    
    const categoryFilter = document.getElementById('category-filter');
    const sortFilter = document.getElementById('sort-filter');
    const listingGrid = document.querySelector('.listing-grid');
    
    // Function to apply filters and sorting
    const applyFilters = () => {
      const cards = Array.from(listingGrid.children);
      const selectedCategory = categoryFilter.value;
      const sortBy = sortFilter.value;
      
      // First filter by category
      cards.forEach(card => {
        const cardCategory = card.dataset.category;
        
        if (selectedCategory && cardCategory !== selectedCategory) {
          card.style.display = 'none';
        } else {
          card.style.display = '';
        }
      });
      
      // Then sort visible cards
      const visibleCards = cards.filter(card => card.style.display !== 'none');
      
      // Sort cards based on selected sort option
      visibleCards.sort((a, b) => {
        switch (sortBy) {
          case 'name':
            return a.dataset.title.localeCompare(b.dataset.title);
          case 'rating':
            return (parseFloat(b.dataset.rating) || 0) - (parseFloat(a.dataset.rating) || 0);
          case 'newest':
            return new Date(b.dataset.date || 0) - new Date(a.dataset.date || 0);
          case 'featured':
          default:
            // Featured items first, then alphabetical
            if (a.dataset.featured === 'true' && b.dataset.featured !== 'true') return -1;
            if (a.dataset.featured !== 'true' && b.dataset.featured === 'true') return 1;
            return a.dataset.title.localeCompare(b.dataset.title);
        }
      });
      
      // Reorder the cards in the DOM
      visibleCards.forEach(card => listingGrid.appendChild(card));
    };
    
    // Apply filters when they change
    categoryFilter.addEventListener('change', applyFilters);
    sortFilter.addEventListener('change', applyFilters);
    
    // Initial application of filters
    applyFilters();
  });
</script>

<style>
  .card-layout {
    width: 100%;
  }
  
  .filters-bar {
    display: flex;
    gap: 1rem;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    align-items: center;
    padding: 1rem;
    background-color: #f5f5f5;
    border-radius: 8px;
  }
  
  .filter-section {
    display: flex;
    flex-direction: column;
    gap: 0.3rem;
  }
  
  label {
    font-size: 0.8rem;
    font-weight: 500;
    color: #666;
  }
  
  .filter-select {
    padding: 0.5rem;
    border-radius: 4px;
    border: 1px solid #ddd;
    background-color: white;
    min-width: 140px;
  }
  
  .listing-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
  }
  
  @media (max-width: 768px) {
    .listing-grid {
      grid-template-columns: 1fr;
    }
  }
</style>