// src/components/layouts/TableLayout.astro
---
const { listings, directory, categories = [] } = Astro.props;
const directoryId = directory.id;

// Helper function to format date
function formatDate(dateString) {
  if (!dateString) return '';
  const date = new Date(dateString);
  return date.toLocaleDateString();
}
---

<div class="table-layout">
  <div class="filters-bar">
    <div class="filter-section">
      <label for="table-category-filter">Category</label>
      <select id="table-category-filter" class="filter-select">
        <option value="">All Categories</option>
        {categories.map(category => (
          <option value={category.id}>{category.name}</option>
        ))}
      </select>
    </div>
    
    <div class="search-box">
      <input type="text" id="table-search" placeholder="Filter items..." />
    </div>
  </div>
  
  <div class="table-container">
    <table class="listings-table">
      <thead>
        <tr>
          <th class="sortable" data-sort="name">Name</th>
          <th class="sortable" data-sort="category">Category</th>
          <th class="sortable" data-sort="rating">Rating</th>
          <th>Address</th>
          <th class="sortable" data-sort="date">Added Date</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        {listings.map(listing => {
          // Find the category name
          const categoryObj = categories.find(c => c.id === listing.data.category);
          const categoryName = categoryObj ? categoryObj.name : listing.data.category;
          
          return (
            <tr 
              data-category={listing.data.category}
              data-name={listing.data.title.toLowerCase()}
              data-rating={listing.data.rating || 0}
              data-date={listing.data.updatedAt || ''}
            >
              <td class="listing-title">
                {listing.data.featured && <span class="featured-badge">Featured</span>}
                {listing.data.title}
              </td>
              <td>{categoryName}</td>
              <td>
                {listing.data.rating ? (
                  <div class="rating-stars" style={`--rating: ${listing.data.rating}`}>
                    <span class="sr-only">{listing.data.rating} out of 5 stars</span>
                  </div>
                ) : (
                  <span class="no-rating">No rating</span>
                )}
              </td>
              <td class="address-cell">{listing.data.address || '-'}</td>
              <td>{listing.data.updatedAt ? formatDate(listing.data.updatedAt) : '-'}</td>
              <td>
                <a href={`/${directoryId}/${listing.slug.replace(`${directoryId}/`, '')}`} class="view-button">
                  View
                </a>
              </td>
            </tr>
          );
        })}
      </tbody>
    </table>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tableLayout = document.querySelector('.table-layout');
    if (!tableLayout) return;
    
    const categoryFilter = document.getElementById('table-category-filter');
    const searchInput = document.getElementById('table-search');
    const tableRows = document.querySelectorAll('.listings-table tbody tr');
    const sortableHeaders = document.querySelectorAll('.sortable');
    
    // Current sort state
    let currentSort = {
      column: 'name',
      direction: 'asc'
    };
    
    // Apply filters and search
    const applyFilters = () => {
      const selectedCategory = categoryFilter.value.toLowerCase();
      const searchTerm = searchInput.value.toLowerCase();
      
      tableRows.forEach(row => {
        const category = row.dataset.category.toLowerCase();
        const name = row.dataset.name.toLowerCase();
        const shouldShow = 
          (selectedCategory === '' || category === selectedCategory) &&
          (searchTerm === '' || name.includes(searchTerm));
        
        row.style.display = shouldShow ? '' : 'none';
      });
    };
    
    // Sort the table
    const sortTable = (column, direction) => {
      const tbody = document.querySelector('.listings-table tbody');
      const rows = Array.from(tableRows);
      
      // Sort rows
      rows.sort((a, b) => {
        let valueA = a.dataset[column] || '';
        let valueB = b.dataset[column] || '';
        
        // Compare based on data type
        if (column === 'rating') {
          valueA = parseFloat(valueA) || 0;
          valueB = parseFloat(valueB) || 0;
          return direction === 'asc' ? valueA - valueB : valueB - valueA;
        } else if (column === 'date') {
          valueA = new Date(valueA || 0).getTime();
          valueB = new Date(valueB || 0).getTime();
          return direction === 'asc' ? valueA - valueB : valueB - valueA;
        } else {
          // String comparison
          return direction === 'asc' 
            ? valueA.localeCompare(valueB)
            : valueB.localeCompare(valueA);
        }
      });
      
      // Update DOM
      rows.forEach(row => tbody.appendChild(row));
      
      // Update sort indicators
      sortableHeaders.forEach(header => {
        header.classList.remove('sort-asc', 'sort-desc');
      });
      
      const activeHeader = document.querySelector(`[data-sort="${column}"]`);
      activeHeader.classList.add(direction === 'asc' ? 'sort-asc' : 'sort-desc');
    };
    
    // Event listeners
    categoryFilter.addEventListener('change', applyFilters);
    searchInput.addEventListener('input', applyFilters);
    
    sortableHeaders.forEach(header => {
      header.addEventListener('click', () => {
        const column = header.dataset.sort;
        let direction = 'asc';
        
        if (currentSort.column === column) {
          // Toggle direction if clicking the same column
          direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
        }
        
        currentSort = { column, direction };
        sortTable(column, direction);
      });
    });
    
    // Initial sort
    sortTable(currentSort.column, currentSort.direction);
  });
</script>

<style>
  .table-layout {
    width: 100%;
  }
  
  .filters-bar {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1rem;
    padding: 1rem;
    background-color: #f5f5f5;
    border-radius: 8px;
  }
  
  .filter-section {
    display: flex;
    flex-direction: column;
    gap: 0.3rem;
  }
  
  label {
    font-size: 0.8rem;
    font-weight: 500;
    color: #666;
  }
  
  .filter-select {
    padding: 0.5rem;
    border-radius: 4px;
    border: 1px solid #ddd;
    background-color: white;
    min-width: 140px;
  }
  
  .search-box input {
    padding: 0.5rem 1rem;
    border-radius: 4px;
    border: 1px solid #ddd;
    min-width: 220px;
  }
  
  .table-container {
    width: 100%;
    overflow-x: auto;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }
  
  .listings-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.95rem;
  }
  
  .listings-table th {
    background-color: var(--primaryColor, #4b7f52);
    color: white;
    padding: 0.75rem 1rem;
    text-align: left;
    position: sticky;
    top: 0;
  }
  
  .listings-table th.sortable {
    cursor: pointer;
    user-select: none;
  }
  
  .listings-table th.sortable::after {
    content: "↕";
    margin-left: 0.5rem;
    opacity: 0.5;
  }
  
  .listings-table th.sort-asc::after {
    content: "↑";
    opacity: 1;
  }
  
  .listings-table th.sort-desc::after {
    content: "↓";
    opacity: 1;
  }
  
  .listings-table tr:nth-child(even) {
    background-color: #f9f9f9;
  }
  
  .listings-table td {
    padding: 0.75rem 1rem;
    border-bottom: 1px solid #eee;
  }
  
  .listing-title {
    font-weight: 500;
  }
  
  .featured-badge {
    display: inline-block;
    font-size: 0.7rem;
    background-color: var(--secondaryColor, #f9a825);
    color: black;
    padding: 0.1rem 0.4rem;
    border-radius: 3px;
    margin-right: 0.5rem;
    vertical-align: middle;
  }
  
  .rating-stars {
    position: relative;
    font-size: 0.85rem;
    width: 5em;
  }
  
  .rating-stars::before {
    content: "★★★★★";
    letter-spacing: 2px;
    color: #ddd;
  }
  
  .rating-stars::after {
    content: "★★★★★";
    letter-spacing: 2px;
    color: var(--secondaryColor, #f9a825);
    position: absolute;
    top: 0;
    left: 0;
    width: calc(var(--rating) / 5 * 100%);
    overflow: hidden;
  }
  
  .no-rating {
    color: #999;
    font-size: 0.85rem;
    font-style: italic;
  }
  
  .address-cell {
    max-width: 200px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .view-button {
    display: inline-block;
    padding: 0.3rem 0.8rem;
    background-color: var(--primaryColor, #4b7f52);
    color: white;
    border-radius: 4px;
    text-decoration: none;
    font-size: 0.85rem;
    transition: background-color 0.2s;
  }
  
  .view-button:hover {
    background-color: var(--primaryColor-dark, #3d6843);
  }
  
  @media (max-width: 768px) {
    .filters-bar {
      flex-direction: column;
      gap: 1rem;
    }
    
    .search-box input {
      width: 100%;
    }
    
    .address-cell {
      max-width: 100px;
    }
  }
</style>